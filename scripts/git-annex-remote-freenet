#!/usr/bin/env python2

import sys
import multiprocessing, multiprocessing.pool
from gitlake import GitAnnexESRP

try:
  import fcp
except:
  GitAnnexESRP().ERROR("** PyFreenet core module 'fcp' not installed.")
  sys.exit(1)


argv = sys.argv
argc = len(argv)
progname = argv[0]

class FreenetTransfer:
  def __init__(self, esrp, url = 'CHK@', key = None):
    self.esrp = esrp
    self.priority = esrp.GETCONFIG('priority')
    self.persistence = esrp.GETCONFIG('persistence')
    self.timeout = int(esrp.GETCONFIG('timeout'))
    if esrp.GETCONFIG('chkonly') == '':
      self.chkonly = False
    else:
      self.chkonly = True
    if esrp.GETCONFIG('localonly') == '':
      self.localonly = False
    else:
      self.localonly = True
    self.Global = self.persistence in ('reboot', 'forever')
    self.Global = False
    self.node = esrp.node
    self.url = url
    self.key = key
    self.transferred = 0

  def _get(self, **args):

    # works around a possible bug in pyFreenet where it crashes if
    # it encounters a past transfer with no data in result
    if 'nodata' in args and args['nodata']:
      persistence = 'connection'
      Global = False
      if not 'ignoreds' in args:
        args['ignoreds'] = not self.localonly
    else:
      persistence = self.persistence
      Global = self.Global

    self.ticket = self.node.get(
      self.url,
      async = True,
      waituntilsent = True,
      Verbosity = 9,
      persistence = persistence,
      Global = Global,
      priority = self.priority,
      dsonly = self.localonly,
      callback = lambda status, value: self._progress(status, value),
      **args
    )
    return self.ticket

  def _put(self, data):
    self.ticket = self.node.put(
      data = data,
      name = self.key,
      uri = self.url,
      async = True,
      waituntilsent = True,
      Verbosity = 9,
      persistence = self.persistence,
      Global = self.Global,
      priority = self.priority,
      chkonly = self.chkonly,
      LocalRequestOnly = self.localonly,
      realtime = True,
      callback = lambda status, value: self._progress(status, value)
    )
    return self.ticket

  def download(self, filename):
    return self._get(stream = file(filename, 'wb')).wait()[1] is None  

  def check(self, **args):
    pool = multiprocessing.pool.ThreadPool(processes=1)
    try:
        async_result = pool.apply_async(self._get(nodata = True, **args).wait)
        return async_result.get(self.timeout)[1] == 1
    except multiprocessing.TimeoutError:
      self.esrp.DEBUG("Timed out.")
      return False

  def _progress(self, status, value):
    self.esrp.DEBUG(status + ': '  + repr(value))
    if status == "pending":
      if value['header'] == "SimpleProgress":
        self.transferred = int(value['Succeeded']) * 32768 * 2 / 3
        self.esrp.PROGRESS(self.transferred)
      elif self.key is None:
        pass
      elif value['header'] == 'URIGenerated':
        uri = value['URI']
      elif value['header'] == 'ExpectedHashes':
        # if the key happens to be SHA256, we can quickly verify the data is not corrupt against the key
        try:
          hash = value['Hashes.SHA256']
          if self.key[:6] == 'SHA256':
            hidx = self.key.index('--') + 2
            if self.key[hidx:hidx+len(hash)] != hash:
              raise Exception('sha256 mismatch %s is not %s' % ( hash, self.key ))
        except KeyError:
          pass
    elif status == "successful":
      self.esrp.PROGRESS(self.transferred + 32768 * 2 / 3)
    


class FreenetRemote(GitAnnexESRP):
  def __init__(self):
    self.node = None
    GitAnnexESRP.__init__(self)

  # create new special remote, may be called repeatedly on the same remote,
  # or not at all if the remote has already been configured
  # usually uses SETCONFIG, SETCREDS
  def initRemote(self):
    if self.GETCONFIG('priority') == '':
      self.SETCONFIG('priority', 0)
    if self.GETCONFIG('persistence') == '':
      self.SETCONFIG('persistence', 'reboot')
    if self.GETCONFIG('timeout') == '':
      self.SETCONFIG('timeout', 60)

  # activate remote, called once at start
  # query configuration with GETCONFIG, GETCREDS
  def prepare(self):
    self.node = fcp.node.FCPNode(name = 'git-annex-' + self.GETUUID(),
                                 logfunc = lambda msg: self.DEBUG(repr(msg)),
                                 verbosity = 5)
    self.jobsTicket = self.node.refreshPersistentRequests(async=True);
    
  # return True if responsible for downloading passed url
  def claimsUrl(self, url):
    return url[0:8] == 'freenet:'

  # return False or True if key is present
  def isPresent(self,key):
    for url in self.GETURLS(key, "freenet:"):
      try:
        return FreenetTransfer(self, url).check()
      except Exception as e:
        self.DEBUG(e.message)
        pass
    return False

  # store file in key
  def store(self,key,filename):
    ticket = None
    uri = 'CHK@'
    state = self.GETSTATE(key)
    if state != '':
      if state[0:2] == 'id':
        self.jobsTicket.wait()
        for job in self.node.getAllJobs():
          if job.id == state:
            ticket = job
    if ticket == None:
      ticket = FreenetTransfer(self, uri, key)._put(file(filename, 'rb').read())
      self.SETSTATE(key, ticket.id)
    uri = ticket.wait()
    self.SETSTATE(key, '')
    self.SETURIPRESENT(key, 'freenet:' + uri)

  # remove a key's contents
  def remove(self, key):
    state = self.GETSTATE(key)
    if state != '':
      if state[0:2] == 'id':
        self.jobsTicket.wait()
        for job in self.node.getAllJobs():
          if job.id == state:
            job.cancel()
    self.SETSTATE(key, '')
    for url in self.GETURLS(key, "freenet:"):
      self.SETURIMISSING(key, url)

  # return a list of (url, size, filename) that may currently be
  # downloaded from the provided url
  # size may be None if unknown
  # return empty list if cannot currently download url
  def checkUrl(self, url):
    try:
      if FreenetTransfer(self, url).check(ignoreds = False):
        return [url, None, '']
    except:
      pass
    return []

  # retrieve key to file
  def retrieve(self, key, filename):
    exception = None
    for url in self.GETURLS(key, "freenet:"):
      try:
        if FreenetTransfer(self, url, key).download(filename):
          return
      except Exception as e:
        exception = e
    if exception is None:
      exception = Exception('Not present')
    raise exception

  # connection closed, deactivate remote if activated
  def finish(self):
    if self.node != None:
      self.node.shutdown()
      

FreenetRemote()
