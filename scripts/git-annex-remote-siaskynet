#!/usr/bin/env python3

import collections
import os
import sys

from gitlake import GitAnnexESRP

try:
	from siaskynet import Skynet
except:
	GitAnnexESRP().ERROR("** Sia Skynet python2 module 'siaskynet' not installed.")
	sys.exit(1)

argv = sys.argv
argc = len(argv)
progname = argv[0]

class SkynetRemote(GitAnnexESRP):
	def __init__(self):
		GitAnnexESRP.__init__(self)

	# return True if responsible for downloading passed url
	def claimsUrl(self, url):
		return url[0:6] == 'sia://'

	# return False or True if key is present
	def isPresent(self, key):
		self.DEBUG('isPresent ' + key)
		keymetadata = key.split('--')[0]
		keysize = None
		if keymetadata.find('-s') != -1:
			keysize = int(keymetadata.split('-s')[1].split('-')[0])
		for url in self.GETURLS(key, 'sia://'):
			self.DEBUG("checking " + url)
			try:
				metadata = Skynet.metadata(url)
				self.DEBUG("metadata: " + str(metadata))
				if "Skynet-File-Metadata" in metadata and "filename" in metadata["Skynet-File-Metadata"]:
					filename = metadata["Skynet-File-Metadata"]["filename"]
				elif "filename" in metadata:
					filename = metadata["filename"]
				else:
					filename = None
				if filename is not None and os.path.basename(filename) != key:
					self.DEBUG('filename "' + filename + '" of "' + url + '" mismatches key')
					continue
				if "Content-Length" in metadata:
					length = metadata["Content-Length"]
				elif "subfiles" in metadata and filename in metadata["subfiles"] and "len" in metadata["subfiles"][filename]:
					length = metadata["subfiles"][filename]["len"]
				if "Skynet-File-Metadata" in metadata and "subfiles" in metadata and filename in metadata["subfiles"] and "len" in metadata["subfiles"][filename]:
					length = metadata["Skynet-File-Metadata"]["subfiles"][filename]["len"]
				else:
					length = None
				if keysize is not None and length is not None and int(length) != keysize:
					self.DEBUG('length "' + length + '" of "' + url + '" mismatches key')
					continue
				return True
			except Exception as exception:
				self.DEBUG(repr(exception))
				pass
		return False

	# store file in key
	def store(self, key, filename):
		opts = Skynet.default_upload_options()
		opts.custom_filename = os.path.basename(filename)
		with open(filename, 'rb') as file_object:
			def chunks():
				chunk_size = 128 * 1024
				progress = 0
				while True:
					self.PROGRESS(progress)
					data = file_object.read(chunk_size)
					if not data:
						break
					progress = progress + len(data)
					yield data
			response = Skynet.upload_file_request_with_chunks(chunks(), opts)
		skylink = Skynet.uri_skynet_prefix() + response.json()['skylink']
		self.SETURIPRESENT(key, skylink)
		for url in SkynetRemote.skylink_to_urls(skylink):
			self.SETURIPRESENT(key, url)

	@staticmethod
	def skylink_to_urls(skylink):
		skylink = Skynet.strip_prefix(skylink)
                
		download_options = Skynet.default_download_options()
		urls = [download_options.portal_url + '/' + skylink]
		return urls

	def checkUrl(self, url):
		try:
			metadata = Skynet.metadata(url)
			filename = metadata["filename"]
			length = int(metadata["subfiles"][filename]["len"])
			return [url, length, filename]
		except:
			return []

	# retrieve key to file
	def retrieve(self, key, filename):
		for url in self.GETURLS(key, 'sia://'):
			try:
				Skynet.download_file(filename, url)
			except Exception as exception:
				self.DEBUG(exception.message)
				pass
		return False

SkynetRemote()
