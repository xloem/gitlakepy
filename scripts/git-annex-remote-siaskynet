#!/usr/bin/env python3

import collections
import os
import random
import sys
import time

from gitlake import GitAnnexESRP

try:
	from siaskynet import Skynet
	import json
except:
	GitAnnexESRP().ERROR("** Sia Skynet python3 module 'siaskynet' not installed.")
	sys.exit(1)

argv = sys.argv
argc = len(argv)
progname = argv[0]


class SkynetRemote(GitAnnexESRP):
	def __init__(self):
		self.webportals = {
                        'download_webonly': [
				"https://sialoop.net", # getting occasional corruption 2020-05
				"https://skynethub.io", # getting occasional corruption 2020-05
                        ],
			'download': [
				"https://siasky.net",
				"https://skydrain.net",
				"https://skynet.luxor.tech",
				#"https://skynet.tutemwesi.com", # very slow to respond 2020-05
				"https://www.siacdn.com",
				"https://vault.lightspeedhosting.com"
			],
			'upload': [
				"https://skynet.luxor.tech",
				"https://sialoop.net",
				"https://skydrain.net",
				"https://www.siacdn.com", # really slow right now
				"https://siasky.net",
				"https://skynethub.io", # might get slow, comment out?
				#"https://skynet.tutemwesi.com",
			]
		}
		self.options_getters = {
			'download': Skynet.default_download_options,
			'upload': Skynet.default_upload_options
		}
		GitAnnexESRP.__init__(self)

	def attempt(self, attempt_type):
		attempt = {
			'weburls': [*self.webportals[attempt_type]],
			'getter': self.options_getters[attempt_type],
			'type': attempt_type,
		}
		random.shuffle(attempt['weburls'])
		return attempt

	def attempt_options(self, attempt, try_forever = True):
		if len(attempt['weburls']) == 0:
			if try_forever:
				attempt['weburls'] = [*self.webportals[attempt['type']]]
				random.shuffle(attempt['weburls'])
			else:
				raise Exception('tried all portals')
		weburl = attempt['weburls'].pop()
		self.DEBUG('Trying webportal ' + weburl)
		attempt['weburl'] = weburl
		options = attempt['getter']()
		options.portal_url = weburl
		return options

	# return True if responsible for downloading passed url
	def claimsUrl(self, url):
		return url[0:6] == 'sia://'

	def metadataGood(self, key, skylink, keysize):
		try:
			metadata = self.metadata(skylink)
			if metadata.filename is not None and os.path.basename(metadata.filename) != key:
				self.DEBUG('filename "' + metadata.filename + '" of "' + skylink + '" mismatches key')
				return False
			if keysize is not None and metadata.length is not None and int(metadata.length) != keysize:
				self.DEBUG('length "' + metadata.length + '" of "' + skylink + '" mismatches key')
				return False
			return True
		except Exception as exception:
			self.DEBUG(repr(exception))
			return False


	# return False or True if key is present
	def isPresent(self, key):
		keysize = self.GETSIZE(key)
		for url in self.GETURLS(key, 'sia://'):
			if not self.metadataGood(key, url, keysize):
				continue
			return True
		return False

	# store file in key
	def store(self, key, filename):
		attempt = self.attempt('upload')
		# store should be changed to upload to every portal in list.
		# preferably in parallel.
		count = 0
		while True:
			options = self.attempt_options(attempt)
			options.custom_filename = os.path.basename(filename)
			options.portal_upload_path += '/' + ''.join(filter(lambda x: x.isalnum(), key + str(time.time())))
			keysize = self.GETSIZE(options.custom_filename)
			try:
				self.DEBUG('Trying to upload %s' % filename)
				if keysize >= 256 * 1024:
					with open(filename, 'rb') as file_object:
						def chunks():
							chunk_size = 128 * 1024
							progress = 0
							while True:
								self.PROGRESS(progress)
								data = file_object.read(chunk_size)
								if not data:
									self.DEBUG('Finished sending, waiting for server.')
									break
								progress = progress + len(data)
								yield data
						response = Skynet.upload_file_request_with_chunks(chunks(), options)
						self.DEBUG('Server accepted last chunk.')
				else:
					response = Skynet.upload_file_request(filename, options)
				skylink = Skynet.uri_skynet_prefix() + response.json()['skylink']
				count = count + 1
				if count > 1:
					break
			except Exception as exception:
				self.DEBUG(attempt['weburl'] + ': ' + repr(response.text))
				self.DEBUG(attempt['weburl'] + ': ' + repr(exception))
				continue
			if not self.metadataGood(options.custom_filename, skylink, keysize):
				self.DEBUG('Upload unsuccessful')
				continue
			break
		self.SETURIPRESENT(key, skylink)
		for url in self.skylink_to_urls(skylink):
			self.SETURLPRESENT(key, url)

	def skylink_to_urls(self, skylink):
		skylink = Skynet.strip_prefix(skylink)
		
		download_options = Skynet.default_download_options()
		urls = [portal_url + '/' + skylink for portal_url in self.webportals['download']]
		urls.extend([portal_url + '/' + skylink for portal_url in self.webportals['download_webonly']])
		return urls

	def metadata(self, url):
		attempt = self.attempt('download')
		while True:
			options = self.attempt_options(attempt)
			try:
				result = Skynet.metadata_request(url, options)
				if result.status_code != 200:
					continue
				metadata = {
					"Content-Type": result.headers["Content-Type"]
				}
				if "Content-Length" in result.headers:
					metadata["Content-Length"] = result.headers["Content-Length"]
				if "Content-Disposition" in result.headers:
					metadata["Content-Disposition"] = result.headers["Content-Disposition"]
				if "Skynet-File-Metadata" in result.headers:
					metadata["Skynet-File-Metadata"] = json.loads(result.headers["Skynet-File-Metadata"])
				break
			except Exception as exception:
				self.DEBUG(attempt['weburl'] + ': ' + repr(exception))
		self.DEBUG("metadata: " + str(metadata))
		if "Skynet-File-Metadata" in metadata and "filename" in metadata["Skynet-File-Metadata"]:
			filename = metadata["Skynet-File-Metadata"]["filename"]
		elif "filename" in metadata:
			filename = metadata["filename"]
		else:
			filename = None
		if "Content-Length" in metadata:
			length = metadata["Content-Length"]
		elif "subfiles" in metadata and filename in metadata["subfiles"] and "len" in metadata["subfiles"][filename]:
			length = metadata["subfiles"][filename]["len"]
		elif "Skynet-File-Metadata" in metadata and "subfiles" in metadata and filename in metadata["subfiles"] and "len" in metadata["subfiles"][filename]:
			length = metadata["Skynet-File-Metadata"]["subfiles"][filename]["len"]
		else:
			length = None
		return type('obj', (object,), {
			'filename': filename,
			'length': length
		})

	def checkUrl(self, url):
		try:
			metadata = self.metadata(url)
			return [url, metadata.length, metadata.filename]
		except:
			return []

	# retrieve key to file
	def retrieve(self, key, filename):
		keysize = self.GETSIZE(key)
		for url in self.GETURLS(key, 'sia://'):
			try:
				attempt = self.attempt('download')
				while True:
					try:
						options = self.attempt_options(attempt, False)
						result = Skynet.download_file_request(url, options, stream=True)
						if result.status_code == 200:
							total_length = result.headers.get('Content-Length')
							if keysize is not None and total_length is not None and keysize != int(total_length):
								self.ERROR('Remote size is small')
								result.close()
								continue
							downloaded = 0
							with open(filename, "wb") as output:
								for data in result.iter_content(chunk_size = 128 * 1024):
									downloaded += len(data)
									output.write(data)
									self.PROGRESS(downloaded)
							if keysize is not None and downloaded < keysize:
								self.DEBUG('Short download %d < %d ...' % (len(result.content), keysize))
								result.close()
								continue
							break
						else:
							result.close()
							continue
					except Exception as exception:
						self.DEBUG(attempt['weburl'] + ': ' + repr(exception))
						continue
			except Exception as exception:
				self.DEBUG(repr(exception))
				continue
		return False

	# remove a key's contents
	def remove(self, key):
		# not easy to delete from skynet atm, but making the file inaccessible lets fsck handle corrupt uploads as it expects
		for skylink in self.GETURLS(key, 'sia://'):
			self.SETURIMISSING(key, skylink)
			for url in self.skylink_to_urls(skylink):
				self.SETURLMISSING(key, url)

SkynetRemote()
