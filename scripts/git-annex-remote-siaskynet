#!/usr/bin/env python3

import collections
import io
import os
import random
import sys
import time
import traceback

from gitlake import GitAnnexESRP

try:
	import siaskynet
	from siaskynet import SkynetClient, _upload
	import json
except:
	GitAnnexESRP().ERROR("** Sia Skynet python3 module 'siaskynet' not installed.")
	sys.exit(1)

argv = sys.argv
argc = len(argv)
progname = argv[0]


class SkynetRemote(GitAnnexESRP):
	def __init__(self, mockinput = None):
		# note: you can get an array of webportals from
		#	requests.get('https://siastats.info/dbs/skynet_current.json').json()
		self.webportals = {
			'disabled': [
				"https://skyportal.xyz", # downloads timing out 2020-09-22
			],
			'download_webonly': [
				"https://sialoop.net", # getting occasional corruption 2020-05; very slow to respond to metadata query 2020-08-02
				"https://www.siacdn.com", # very slow to respond to metadata query 2020-08-02, 2020-09-27
				"https://siasky.dev", # very slow to respond to metadata query 2020-08-02; working 2020-09-27; timing out 2020-12-17
			],
			'download': [
				"https://skynet.luxor.tech",
				"https://vault.lightspeedhosting.com",
				"https://siasky.net", # slow 2020-08-02 # speedy 2020-09-22
				"http://skydrain.net", # very slow to respond to metadata query 2020-08-02
				"https://skynet.tutemwesi.com", # very slow to respond 2020-05, 2020-08-2
				"https://skynethub.io", # getting occasional corruption 2020-05; very slow to respond to metadata query 2020-08-02
				"https://skyportal.xyz", # downloads timing out 2020-09-22
			],
			'upload': [
				"https://siasky.net",  # '504 Gateway Time-out' instead of skylink, 128MiB: 2020-07-23, 2020-07-24
				"https://siasky.dev",
				"https://skyportal.xyz", # good 2020-09-27
				"https://sialoop.net", # 2020-07-23 gave me 'too large' with a ~128MiB file
				"https://skydrain.net", # '502 bad gateway' instead of skylink, 128MiB: 2020-07-23
				"https://skynethub.io", # 'request entity too large' instead of skylink, 128MiB: 2020-07-31
				#"https://skynet.luxor.tech", # '502 bad gateway' instead of skylink, 128MiB: 2020-07-23, small file: 2020-09-27
				#"https://www.siacdn.com", # '504 Gateway Timed out' instead of skylink, 128MiB: 2020-07-31
				#"https://skynet.tutemwesi.com", # 'unable to upload large skyfile', 128MiB: 2020-07-24; 502 bad gateway instead of skylink 3.1G 2020-09-28
			]
		}
		GitAnnexESRP.__init__(self, mockinput)

	def attempt(self, attempt_type):
		attempt = {
			'weburls': [*self.webportals[attempt_type]],
			'type': attempt_type,
		}
		random.shuffle(attempt['weburls'])
		return attempt

	def attempt_options(self, attempt, task, try_forever = True):
		if len(attempt['weburls']) == 0:
			if try_forever:
				attempt['weburls'] = [*self.webportals[attempt['type']]]
				random.shuffle(attempt['weburls'])
			else:
				raise Exception('tried all portals')
		weburl = attempt['weburls'].pop()
		self.DEBUG('Trying webportal ' + weburl + ' for ' + task)
		attempt['weburl'] = weburl
		options = {}
		options['portal_url'] = weburl
		options['timeout_seconds'] = 10
		return options

	# return True if responsible for downloading passed url
	def claimsUrl(self, url):
		if url[0:len('sia://')] == 'sia://':
			return True
		for portalurl in self.skylink_to_urls(''):
			if url.startswith(portalurl):
				return True
		return False

	def metadataGood(self, key, skylink, keysize):
		try:
			metadata = self.metadata(skylink)
			if metadata.filename is not None and os.path.basename(metadata.filename) != key:
				self.DEBUG('filename "' + metadata.filename + '" of "' + skylink + '" mismatches key')
				return False
			if keysize is not None and metadata.length is not None and int(metadata.length) != keysize:
				self.DEBUG('length "' + metadata.length + '" of "' + skylink + '" mismatches key')
				return False
			return True
		except Exception as exception:
			self.DEBUG(repr(exception))
			for line in traceback.format_exc().split('\n'):
				self.DEBUG(line)
			return False


	# return False or True if key is present
	def isPresent(self, key):
		keysize = self.GETSIZE(key)
		for url in self.GETURLS(key, 'sia://'):
			if not self.metadataGood(key, url, keysize):
				continue
			return True
		return False

	# store file in key
	def store(self, key, filename):
		attempt = self.attempt('upload')
		# store should be changed to upload to every portal in list.
		# preferably in parallel.
		count = 0
		while True:
			options = self.attempt_options(attempt, key)
			options['custom_filename'] = os.path.basename(filename)
			options['endpoint_path'] = '/skynet/skyfile/' + ''.join(filter(lambda x: x.isalnum(), key + str(time.time())))
			keysize = self.GETSIZE(key)
			try:
				self.DEBUG('Trying to upload %s' % filename)
				if keysize is None or keysize >= 256 * 1024:
					def upload_file_request_with_chunks(client, data, options):
						# until we (or somebody) finish https://github.com/NebulousLabs/python-skynet/pull/36
						opts = _upload.default_upload_options()
						opts.update(client.custom_opts)
						if options is not None:
							opts.update(options)
						if opts['custom_filename']:
							filename = opts['custom_filename']
						else:
							filename = str(data)

						upload_data = {filename: data}

						params = {'filename': filename}
						headers = {'Content-Type': 'application/octet-stream'}
						return client.execute_request('POST',opts,data=data,headers=headers,params=params)
					class progressreader(io.BufferedReader):
						def __init__(self2, filename, progress):
							super().__init__(io.FileIO(filename, 'rb'))
							self2.progress = progress
							self2.filename = filename
						def read(self2, size = None):
							self2.progress(self2.tell())
							data = super().read(size)
							self.DEBUG(len(data))
							return data;
						def __str__(self2):
							return self2.filename
					def progressgenerator(filename, progress):
						self.DEBUG('generating started!')
						with open(filename, 'rb') as file:
							while True:
								progress(file.tell())
								data = file.read(8192)
								if len(data) == 0:
									break
								yield data
					response = SkynetClient(options['portal_url']).upload_file_request_with_chunks(progressgenerator(filename, self.PROGRESS), options)
					#with progressreader(filename, self.PROGRESS) as data:
					#	response = SkynetClient(options['portal_url']).upload_file_request_with_chunks(data, options)
						#response = upload_file_request_with_chunks(SkynetClient(options['portal_url']), data, options)
					self.DEBUG('Last chunk accepted by ' + options['portal_url'])
				else:
					response = SkynetClient(options['portal_url']).upload_file_request(filename, options)
				for line in response.text.split('\n'):
					self.DEBUG(line)
				response = response.json()
				try:
					skylink = 'sia://' + response['skylink']
				except KeyError:
					self.DEBUG(response['message']);
					continue
				count = count + 1
				if count > 1:
					break
			except Exception as exception:
				self.DEBUG(attempt['weburl'] + ': ')
				for line in traceback.format_exc().split('\n'):
					self.DEBUG(line)
				continue
			if not self.metadataGood(options['custom_filename'], skylink, keysize):
				self.DEBUG('Upload unsuccessful')
				continue
			break
		self.SETURIPRESENT(key, skylink)
		for url in self.skylink_to_urls(skylink):
			self.SETURLPRESENT(key, url)

	def skylink_to_urls(self, skylink):
		if skylink.startswith('sia://'):
			skylink = skylink[len('sia://'):]
		
		urls = [portal_url + '/' + skylink for portal_url in self.webportals['download']]
		urls.extend([portal_url + '/' + skylink for portal_url in self.webportals['download_webonly']])
		return urls

	def metadata(self, url):
		attempt = self.attempt('download')
		while True:
			options = self.attempt_options(attempt, url, False)
			try:
				result = SkynetClient(options['portal_url']).get_metadata_request(url, options)
				if result.status_code != 200:
					continue
				metadata = {
					"Content-Type": result.headers["Content-Type"]
				}
				if "Content-Length" in result.headers:
					metadata["Content-Length"] = result.headers["Content-Length"]
				if "Content-Disposition" in result.headers:
					metadata["Content-Disposition"] = result.headers["Content-Disposition"]
				if "Skynet-File-Metadata" in result.headers:
					metadata["Skynet-File-Metadata"] = json.loads(result.headers["Skynet-File-Metadata"])
				break
			except Exception as exception:
				self.DEBUG(attempt['weburl'] + ': ' + repr(exception))
		self.DEBUG("metadata: " + str(metadata))
		if "Skynet-File-Metadata" in metadata and "filename" in metadata["Skynet-File-Metadata"]:
			filename = metadata["Skynet-File-Metadata"]["filename"]
		elif "filename" in metadata:
			filename = metadata["filename"]
		else:
			filename = None
		if "Content-Length" in metadata:
			length = metadata["Content-Length"]
		elif "subfiles" in metadata and filename in metadata["subfiles"] and "len" in metadata["subfiles"][filename]:
			length = metadata["subfiles"][filename]["len"]
		elif "Skynet-File-Metadata" in metadata and "subfiles" in metadata and filename in metadata["subfiles"] and "len" in metadata["subfiles"][filename]:
			length = metadata["Skynet-File-Metadata"]["subfiles"][filename]["len"]
		else:
			length = None
		return type('obj', (object,), {
			'filename': filename,
			'length': length
		})

	def checkUrl(self, url):
		try:
			metadata = self.metadata(url)
			return [url, metadata.length, metadata.filename]
		except:
			return []

	# retrieve key to file
	def retrieve(self, key, filename):
		keysize = self.GETSIZE(key)
		for url in self.GETURLS(key, 'sia://'):
			try:
				attempt = self.attempt('download')
				while True:
					options = self.attempt_options(attempt, url, False)
					try:
						result = SkynetClient(options['portal_url']).download_file_request(url, options, stream=True)
						if result.status_code == 200:
							total_length = result.headers.get('Content-Length')
							if keysize is not None and total_length is not None and keysize != int(total_length):
								self.ERROR('Remote size is small: %d' % int(total_length))
								result.close()
								continue
							downloaded = 0
							with open(filename, "wb") as output:
								for data in result.iter_content(chunk_size = None):
									downloaded += len(data)
									output.write(data)
									self.PROGRESS(downloaded)
							if keysize is not None and downloaded < keysize:
								self.DEBUG('Short download %d < %d ...' % (len(result.content), keysize))
								result.close()
								continue
							return
						else:
							result.close()
							continue
					except Exception as exception:
						self.DEBUG(attempt['weburl'] + ': ' + repr(exception))
						continue
			except Exception as exception:
				self.DEBUG(repr(exception))
				continue
		raise Exception("tried all portals; are you online?");

	# remove a key's contents
	def remove(self, key):
		# not easy to delete from skynet atm, but making the file inaccessible lets fsck handle corrupt uploads as it expects
		for skylink in self.GETURLS(key, 'sia://'):
			self.SETURIMISSING(key, skylink)
			for url in self.skylink_to_urls(skylink):
				self.SETURLMISSING(key, url)

if __name__ == '__main__':
	SkynetRemote()
