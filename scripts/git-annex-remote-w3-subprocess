#!/usr/bin/env python3

from annexremote import Master as Main, SpecialRemote, RemoteError, UnsupportedRequest

import json, os, random, subprocess, time

class W3StorageRemote(SpecialRemote):
    def __init__(self, annex):
        super().__init__(annex)
        self.configs = {
            'token': 'API token for api.web3.storage'
        }
        self.local_dir = None

    def initremote(self):
		# initialize in repo, e.g. create folders or change settings
        # 'git annex initremote' / 'git annex enableremote'

        token = self.annex.getconfig('token')
        #token = self.annex.getcreds('token')['password']
        if token == '':
            raise RemoteError('token is required')

        self.w3('token', input=token+'\n')

        self.prepare()


    def prepare(self):
        # prepare to be used for transfers, e.g. open connection
        self.annex.info(self.w3('--version').strip())

        list_output = self.w3('list', '--json').strip()
        if len(list_output) > 0:
            self.stored = [json.loads(upload) for upload in list_output.split('\n')]
            self.stored = { upload['name']: upload for upload in self.stored }
        else:
            self.stored = {}
        total_stored = sum((item['dagSize'] for item in self.stored.values()))
        for key in self.stored:
            statuses = self.keystatuses(key)
            if 'Pinned' not in statuses or ('Active' not in statuses and 'Published' not in statuses):
                self.annex.info(f"{key}: {' '.join(statuses)}")
        self.annex.info(f'{len(self.stored)} items - {total_stored // 1024 // 1024} MiB stored')

    def transfer_store(self, key, filename):
        with open(filename, 'rb') as file:
            file.seek(0, os.SEEK_END)
            size = file.tell()
        #if size <= 100 * 1024 * 1024 * 1024:
        #else:
        if True:
            lines = self.w3('put', filename, '--no-wrap', '--name', key).split('\n')
            self.annex.debug('lines[0] = ' + repr(lines[0]))
            self.annex.debug('lines[1] = ' + repr(lines[1]))
            cid = lines[0].split(' ')[-1]
        status = json.loads(self.w3('status', cid))
        status['name'] = key
        status['_git_annex_just_put'] = True
        self.stored[key] = status
        for url in self.cid_urls(cid):
            self.annex.seturlpresent(key, url)
        for uri in self.cid_uris(cid):
            self.annex.seturipresent(key, uri)

    def transfer_retrieve(self, key, local_file):
        self.w3('get', self.stored[key]['cid'], '--output', local_file)

    def remove(self, key):
        #raise UnsupportedRequest()
        return

    def checkpresent(self, key):
        statuses = self.keystatuses(key)
        self.annex.debug(key + ' statuses: ' + ' '.join(statuses))
        return 'Pinned' in statuses or 'Active' in statuses or 'Published' in statuses or 'JustPut' in statuses

    def getavailability(self):
        return 'global'

    def cid_urls(self, cid):
        return [
            f'https://{cid}.ipfs.dweb.link/',
            #f'https://dweb.link/ipfs/{cid}'
        ]

    def cid_uris(self, cid):
        return [f'ipfs:{cid}']

    def whereis(self, key):
        item = self.stored.get(key)
        if item is None:
            return ''
        else:
            cid = item['cid']
            return ' '.join((self.cid_uris(cid)))

    def w3(self, *params, input=None, backoff_secs=8):
        if self.local_dir is None:
            self.local_dir = os.path.join(self.annex.getgitdir(), self.__class__.__name__, self.annex.getuuid())
        try:
            self.annex.debug('w3 ' + ' '.join(params))
            result = subprocess.run(
                (os.environ.get('W3', 'w3'), *params),
                env={**os.environ, 'HOME':self.local_dir},
                input=input,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                check=True,
                text=True
            )
            for line in result.stdout.split('\n'):
                self.annex.debug(line[:80])
            for line in result.stderr.split('\n'):
                self.annex.debug(line[:80])
            self.annex.debug('PROCESS SUCCESS w3 ' + ' '.join(params))
        except subprocess.CalledProcessError as err:
            self.annex.info('err: w3 ' + ' '.join(params))
            if 'JSON.parse' in err.stderr or 'Too Many Requests' in err.stdout:
                delay = backoff_secs + backoff_secs * random.random()
                self.annex.info(f'Waiting {int(delay+0.5)} seconds.')
                for line in err.stdout.split('\n'):
                    self.annex.info(line)
                for line in err.stderr.split('\n'):
                    self.annex.info(line)
                time.sleep(delay)
                self.annex.info(f'Done waiting for {int(delay+0.5)} seconds.')
                return self.w3(*params, input=input, backoff_secs = delay)
            elif 'EAI_AGAIN' in err.stderr:
                self.annex.info(f'EAI_AGAIN')
                return self.w3(*params, input=input, backoff_secs = backoff_secs)

            raise RemoteError((err.stdout + ' '  + err.stderr).replace('\n', ' '))
        return result.stdout
    #def setup(self):
    #    subprocess.run(('w3', 

    def keystatuses(self, key):
        item = self.stored.get(key, dict(pin=[], deal=[]))
        result = set((*(pin['status'] for pin in item.get('pins',())), *(deal['status'] for deal in item.get('deals',()))))
        if '_git_annex_just_put' in item:
            result.add('JustPut')
        return result

if __name__ == '__main__':
    main = Main()
    remote = W3StorageRemote(main)
    main.LinkRemote(remote)
    main.Listen()
