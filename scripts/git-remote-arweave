#!/usr/bin/env python3

####
# - https://arweave.net/txid or arweave://txid -> tip object store
# - arweave://block/bundle/dataitem -> root object store
# - valid object stores reference the root object store as an alternate.

import ar
peer = ar.Peer()

import dulwich.repo, dulwich.server

ADDRESS_LEN = 43
BLOCK_LEN = 64

class ArweavePath:
    def __init__(self, path):
        self.

    @staticmethod
    def parsepart(self, parts, partname, partlen):
        if len(parts):
            if len(parts[0]) == partlen:
                return parts.pop(0), parts
            elif parts[0].startswith(partname + ':') and len(parts[0]) = partlen + len(partname) + 1:
                return parts.pop(0)[len(partname)+1:], parts
            elif len(parts) > 1 and parts[0] == partname and len(parts[1]) == partlen:
                return parts[1], parts[2:]
        return None, parts
    @staticmethod
    def path2parts(self, path):
        if path.startswith('arweave://' or path.startswith('http'):
            proto, path = path.split('://', 1)
        else:
            proto = None
        if proto.startswith('http'):
            host, path = path.split('/', 1)
            ar.logger.warning(f'Ignoring host: {host}')
        else:
            host = None
        path = path.split('/')
        block, path = self.parsepart(parts, 'block', BLOCK_LEN)
        bundle, path = self.parsepart(parts, 'bundle', ADDRESS_LEN)
        id, path = self.parsepart(parts, 'id', ADDRESS_LEN)
        return dict(
            block = block, bundle = bundle, id = id,
            path = '/'.join(path)
        )

class HookedFilesystem:
    def __init__(self, loader):
        self.loader = loader
        self.path = self.path(loader)
    class path:
        def __init__(self, loader):
            self.loader = loader
        def join(self, *components):
            return '/'.join(components)
        def isfile(self, path):
            return path.endsiwth('/') or '/' not in path.replace('//','')
        @staticmethod
        def isdir(path):
            
dulwich.repo.os = HookedFilesystem

class HookedBackend(dulwich.server.Backend):
    def open_repository(self, path):
        return dulwich.repo.Repo(path)
        

class GitRemote:
    def __init__(self, stdin, stoud):
        self.stdin = stdin
        self.stdout = stdout
    

if __name__ == '__main__':
    HookedBackend().open_repository('asdf')
    #import sys
    #GitRemote().run(sys.stdin, sys.stdout)
